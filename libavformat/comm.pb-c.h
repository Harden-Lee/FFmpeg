/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: comm.proto */

#ifndef PROTOBUF_C_comm_2eproto__INCLUDED
#define PROTOBUF_C_comm_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Livepb__Comm__CsCommHeartbeatReq Livepb__Comm__CsCommHeartbeatReq;
typedef struct _Livepb__Comm__ScCommHeartbeatRes Livepb__Comm__ScCommHeartbeatRes;
typedef struct _Livepb__Comm__CsCommLoginReq Livepb__Comm__CsCommLoginReq;
typedef struct _Livepb__Comm__ScCommLoginRes Livepb__Comm__ScCommLoginRes;


/* --- enums --- */

/*
 * 登陆方式
 */
typedef enum _Livepb__Comm__LoginType {
  /*
   * 不鉴权
   */
  LIVEPB__COMM__LOGIN_TYPE__ByNone = 0,
  /*
   * 携带 token 登陆
   */
  LIVEPB__COMM__LOGIN_TYPE__ByToken = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LIVEPB__COMM__LOGIN_TYPE)
} Livepb__Comm__LoginType;
/*
 * 登录成功或失败(原因)
 */
typedef enum _Livepb__Comm__LoginCode {
  /*
   * 登录成功
   */
  LIVEPB__COMM__LOGIN_CODE__LoginOk = 0,
  /*
   * token无效
   */
  LIVEPB__COMM__LOGIN_CODE__InvalidToken = 16,
  /*
   * 路数受限
   */
  LIVEPB__COMM__LOGIN_CODE__ConnLimited = 17,
  /*
   * 带宽受限
   */
  LIVEPB__COMM__LOGIN_CODE__BandwidthLimited = 18
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LIVEPB__COMM__LOGIN_CODE)
} Livepb__Comm__LoginCode;

/* --- messages --- */

/*
 * 心跳请求(10000)
 */
struct  _Livepb__Comm__CsCommHeartbeatReq
{
  ProtobufCMessage base;
};
#define LIVEPB__COMM__CS_COMM_HEARTBEAT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livepb__comm__cs_comm_heartbeat_req__descriptor) \
     }


/*
 * 心跳返回(10001)
 */
struct  _Livepb__Comm__ScCommHeartbeatRes
{
  ProtobufCMessage base;
  protobuf_c_boolean has_heartbeat_at;
  int64_t heartbeat_at;
};
#define LIVEPB__COMM__SC_COMM_HEARTBEAT_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livepb__comm__sc_comm_heartbeat_res__descriptor) \
    , 0, 0 }


/*
 * 登陆请求(10002)
 */
struct  _Livepb__Comm__CsCommLoginReq
{
  ProtobufCMessage base;
  /*
   * 登陆方式
   */
  protobuf_c_boolean has_login_type;
  Livepb__Comm__LoginType login_type;
  /*
   * 登录token
   */
  char *token;
  /*
   * app(挂载点)
   */
  char *app;
  /*
   * 流号
   */
  char *stream_id;
};
#define LIVEPB__COMM__CS_COMM_LOGIN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livepb__comm__cs_comm_login_req__descriptor) \
    , 0, LIVEPB__COMM__LOGIN_TYPE__ByNone, NULL, NULL, NULL }


/*
 * 登陆返回(10003)
 */
struct  _Livepb__Comm__ScCommLoginRes
{
  ProtobufCMessage base;
  /*
   * 登录成功,返回0;失败,返回原因
   */
  protobuf_c_boolean has_errcode;
  Livepb__Comm__LoginCode errcode;
};
#define LIVEPB__COMM__SC_COMM_LOGIN_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&livepb__comm__sc_comm_login_res__descriptor) \
    , 0, LIVEPB__COMM__LOGIN_CODE__LoginOk }


/* Livepb__Comm__CsCommHeartbeatReq methods */
void   livepb__comm__cs_comm_heartbeat_req__init
                     (Livepb__Comm__CsCommHeartbeatReq         *message);
size_t livepb__comm__cs_comm_heartbeat_req__get_packed_size
                     (const Livepb__Comm__CsCommHeartbeatReq   *message);
size_t livepb__comm__cs_comm_heartbeat_req__pack
                     (const Livepb__Comm__CsCommHeartbeatReq   *message,
                      uint8_t             *out);
size_t livepb__comm__cs_comm_heartbeat_req__pack_to_buffer
                     (const Livepb__Comm__CsCommHeartbeatReq   *message,
                      ProtobufCBuffer     *buffer);
Livepb__Comm__CsCommHeartbeatReq *
       livepb__comm__cs_comm_heartbeat_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livepb__comm__cs_comm_heartbeat_req__free_unpacked
                     (Livepb__Comm__CsCommHeartbeatReq *message,
                      ProtobufCAllocator *allocator);
/* Livepb__Comm__ScCommHeartbeatRes methods */
void   livepb__comm__sc_comm_heartbeat_res__init
                     (Livepb__Comm__ScCommHeartbeatRes         *message);
size_t livepb__comm__sc_comm_heartbeat_res__get_packed_size
                     (const Livepb__Comm__ScCommHeartbeatRes   *message);
size_t livepb__comm__sc_comm_heartbeat_res__pack
                     (const Livepb__Comm__ScCommHeartbeatRes   *message,
                      uint8_t             *out);
size_t livepb__comm__sc_comm_heartbeat_res__pack_to_buffer
                     (const Livepb__Comm__ScCommHeartbeatRes   *message,
                      ProtobufCBuffer     *buffer);
Livepb__Comm__ScCommHeartbeatRes *
       livepb__comm__sc_comm_heartbeat_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livepb__comm__sc_comm_heartbeat_res__free_unpacked
                     (Livepb__Comm__ScCommHeartbeatRes *message,
                      ProtobufCAllocator *allocator);
/* Livepb__Comm__CsCommLoginReq methods */
void   livepb__comm__cs_comm_login_req__init
                     (Livepb__Comm__CsCommLoginReq         *message);
size_t livepb__comm__cs_comm_login_req__get_packed_size
                     (const Livepb__Comm__CsCommLoginReq   *message);
size_t livepb__comm__cs_comm_login_req__pack
                     (const Livepb__Comm__CsCommLoginReq   *message,
                      uint8_t             *out);
size_t livepb__comm__cs_comm_login_req__pack_to_buffer
                     (const Livepb__Comm__CsCommLoginReq   *message,
                      ProtobufCBuffer     *buffer);
Livepb__Comm__CsCommLoginReq *
       livepb__comm__cs_comm_login_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livepb__comm__cs_comm_login_req__free_unpacked
                     (Livepb__Comm__CsCommLoginReq *message,
                      ProtobufCAllocator *allocator);
/* Livepb__Comm__ScCommLoginRes methods */
void   livepb__comm__sc_comm_login_res__init
                     (Livepb__Comm__ScCommLoginRes         *message);
size_t livepb__comm__sc_comm_login_res__get_packed_size
                     (const Livepb__Comm__ScCommLoginRes   *message);
size_t livepb__comm__sc_comm_login_res__pack
                     (const Livepb__Comm__ScCommLoginRes   *message,
                      uint8_t             *out);
size_t livepb__comm__sc_comm_login_res__pack_to_buffer
                     (const Livepb__Comm__ScCommLoginRes   *message,
                      ProtobufCBuffer     *buffer);
Livepb__Comm__ScCommLoginRes *
       livepb__comm__sc_comm_login_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   livepb__comm__sc_comm_login_res__free_unpacked
                     (Livepb__Comm__ScCommLoginRes *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Livepb__Comm__CsCommHeartbeatReq_Closure)
                 (const Livepb__Comm__CsCommHeartbeatReq *message,
                  void *closure_data);
typedef void (*Livepb__Comm__ScCommHeartbeatRes_Closure)
                 (const Livepb__Comm__ScCommHeartbeatRes *message,
                  void *closure_data);
typedef void (*Livepb__Comm__CsCommLoginReq_Closure)
                 (const Livepb__Comm__CsCommLoginReq *message,
                  void *closure_data);
typedef void (*Livepb__Comm__ScCommLoginRes_Closure)
                 (const Livepb__Comm__ScCommLoginRes *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    livepb__comm__login_type__descriptor;
extern const ProtobufCEnumDescriptor    livepb__comm__login_code__descriptor;
extern const ProtobufCMessageDescriptor livepb__comm__cs_comm_heartbeat_req__descriptor;
extern const ProtobufCMessageDescriptor livepb__comm__sc_comm_heartbeat_res__descriptor;
extern const ProtobufCMessageDescriptor livepb__comm__cs_comm_login_req__descriptor;
extern const ProtobufCMessageDescriptor livepb__comm__sc_comm_login_res__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_comm_2eproto__INCLUDED */
